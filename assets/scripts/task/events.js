'use strict'
const getFormFields = require('../../../lib/get-form-fields.js')
const api = require('./api.js')
const ui = require('./ui.js')

const onCreateTask = event => {
  event.preventDefault()
  const formData = getFormFields(event.target)
  api.createTask(formData)
    // After new task created, immediately update the listing, then reset form fields.
    .then(function () {
      onShowTasks()
      ui.successReset()
    }
    )
    .catch(ui.createTaskFailure)
}

const onShowTasks = () => {
  api.showTasks()
    // Run showTasksSuccess to retrieve data through handlebars. Then simulate
    // click with .trigger on the collapsible task dropdown element being
    // generated by handlebars, so that we can give the collapsible elements
    // the Materialzecss .collapsible event listener.
    .then(ui.showTasksSuccess)
    .then(() => {
      $('.taskDropdown').trigger('click')
    })
    .catch(ui.showTasksFailure)
}

const onUpdateTaskModal = event => {
  event.preventDefault()
  // Set values needed to generate and pass the update-task form data.
  const formData = getFormFields(event.target)
  const modalId = $(event.target).data('id')
  api.updateTaskModal(formData, modalId)
    // Upon successful patch action, reload task listing with new update.
    .then(onShowTasks)
    .catch(ui.updateTaskFailure)
}

// Function to add event listener to handlebars generated update-modal  in oreder
// to give it Materializecss modal event listener / open modal.
const onShowUpdateTaskModal = event => {
  $('.modal').modal()
  $('#updateTaskModal').modal('open')
}

const onDeleteTask = event => {
  event.preventDefault()
  const taskId = $(event.target).data('id')
  api.deleteTask(taskId)
    // Upon task deletion, reload upated task listing.
    .then(onShowTasks)
    .catch(ui.deleteTaskFailure)
}

module.exports = {
  onCreateTask,
  onShowTasks,
  onDeleteTask,
  onUpdateTaskModal,
  onShowUpdateTaskModal
}
